package todotrackingsystem.model;

import java.time.LocalDate;
import todotrackingsystem.utils.InvalidArgumentException;

/**
 * The type ToDoItem, contains all information about a ToDoItem data structure.
 */
public class ToDoItem {

  private Integer id;
  private String text;
  private boolean completed;
  private LocalDate due;
  private Integer priority;
  private String category;


  /**
   * Instantiates a new ToDoItem.
   *
   * @param builder the builder to create the ToDoItem instance
   */
  private ToDoItem(Builder builder) {
    this.id = builder.id;
    this.text = builder.text;
    this.completed = builder.completed;
    this.due = builder.due;
    this.priority = builder.priority;
    this.category = builder.category;
  }

  /**
   * A static Builder class to help instantiate a new ToDoItem.
   */
  public static class Builder {
    private Integer id;  // The autogenerated parameter
    private String text;  // The required parameter
    private boolean completed;  // Default false
    private LocalDate due;  // Default null
    private Integer priority;  //Default null
    private String category;  // Default null

    /**
     * Instantiates a default builder, with the default parameters of the ToDoItem.
     *
     * @param id the id assigned to the ToDoItem
     * @param text a description of the task to be done, represented as a String
     */
    public Builder(Integer id, String text) {
      this.id = id;
      this.text = text;
      this.completed = false;
      this.due = null;
      this.priority = null;
      this.category = null;
    }

    /**
     * Sets the ToDoItem to be completed.
     *
     * @return a builder object
     */
    public Builder complete() {
      this.completed = true;
      return this;
    }

    /**
     * Sets the due date of the ToDoItem.
     *
     * @param date the due date, represented as LocalDate
     * @return a builder object
     */
    public Builder setDueDate(LocalDate date) {
      this.due = date;
      return this;
    }

    /**
     * Sets the priority of the ToDoItem.
     *
     * @param priority the priority of the ToDoItem, represented as an Integer
     * @return a builder object
     */
    public Builder setPriority(Integer priority) {
      this.priority = priority;
      return this;
    }

    /**
     * Sets the category of the ToDoItem.
     *
     * @param category the category of the ToDoItem, represented as String
     * @return a builder object
     */
    public Builder setCategory(String category) {
      this.category = category;
      return this;
    }

    /**
     * Instantiates a new ToDoItem.
     *
     * @return a newly created ToDoItem with the builder.
     */
    public ToDoItem build() {
      return new ToDoItem(this);
    }
  }

  /**
   * Gets id of the ToDoItem.
   *
   * @return the id of ToDoItem
   */
  public Integer getId() {
    return this.id;
  }

  /**
   * Gets the description of the task to be done,
   *
   * @return the text
   */
  public String getText() {
    return this.text;
  }

  /**
   * Gets whether the task is completed or incomplete.
   *
   * @return true if the task is completed, false otherwise.
   */
  public boolean isCompleted() {
    return this.completed;
  }

  /**
   * Gets the due date of the ToDoItem.
   *
   * @return the due date of the ToDoItem.
   */
  public LocalDate getDue() {
    return this.due;
  }

  /**
   * Gets the priority of the ToDoItem, must be between 1 and 3,
   *
   * @return the priority
   */
  public Integer getPriority() {
    return this.priority;
  }

  /**
   * Gets category.
   *
   * @return the category
   */
  public String getCategory() {
    return this.category;
  }

  /**
   * Updates the completion status of an individual ToDoItem.
   */
  public void completeToDo() {
    if (this.completed) {
      System.out.println(String.format("The todo item with id %s is already completed.", this.id));
      return;
    }
    this.completed = true;
  }



  @Override
  public String toString() {
    return "\"" + id +
        "\",\"" + text + "\",\"" +
        completed +
        "\",\"" + (due == null? "?" : String.format("%s/%s/%s", due.getMonthValue(), due.getDayOfMonth(), due.getYear())) +
        "\",\"" + (priority == null? "?" : priority) +
        "\",\"" + (category == null? "?" : category)
        + "\"\n";
  }
}
